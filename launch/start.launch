<?xml version="1.0"?>
<launch>

    <!--
        Starts the basic functionalities of the robot:
          - Robot model
          - Sensors
          - Self filtering
          - Diagnostics
          - Text to speech

        On the real robot, the hardware controllers are NOT started (only the controller enabler).
        These can be started seperately through the amigo dashboard.
    -->

    <arg name="gui" default="true"/>

    <arg name="ROBOT_WORLD" default="$(optenv ROBOT_WORLD tue_robotics_lab)" />
    <arg name="ROBOT_POSE" default="$(optenv ROBOT_POSE -x 0 -y -3 -Y 1.57)" />
    <arg name="ROBOT_REAL" default="$(optenv ROBOT_REAL false)" />
    <arg name="ROBOT_COMPLEXITY" default="$(optenv ROBOT_COMPLEXITY complex)" />

    <!-- load robot -->
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find amigo_robot_model)/description/robot_$(arg ROBOT_COMPLEXITY).urdf.xacro' " />

    <!-- load robot joint group info -->
    <rosparam file="$(find amigo_robot_model)/description/joint_groups.yaml" command="load" />


    <group if="$(arg ROBOT_REAL)">
        <!-- REAL ROBOT -->

        <!-- GRAPHICAL USER INTERFACE -->
        <!--<include file="$(find amigo_launch_files)/launch/interaction/webui.launch" />-->

        <!-- DIAGNOSTICS -->
        <include file="$(find amigo_launch_files)/launch/diagnostics/diagnostics.launch" />
             
        <!-- robot model & integration with low level encoder data-->
        <include file="$(find amigo_state_publisher)/start.launch" />

        <!-- hardware controller enabler -->
        <include file="$(find amigo_launch_files)/launch/actuators/controller_enabler.launch" />

        <!-- RGB lights manager -->
        <node name="rgb_lights_manager" pkg="rgb_lights_manager" type="rgb_lights_manager" output="screen" />

        <!-- Amplifier enabler -->
        <node name="amplifier_enabler" pkg="amigo_amplifier_enabler" type="amplifier_enabler" output="screen" />

    </group>

    <group unless="$(arg ROBOT_REAL)">
        <!-- SIMULATION -->

        <!-- Required simulation parameter -->
        <param name="/use_sim_time" value="true"/>

        <!-- start world file (export HEADLESS to -r if you want to run gazebo headless, this is done on the Jenkins server, ask Rob J-->
        <node name="gazebo" pkg="gazebo" type="gazebo" args="$(find amigo_maps)/worlds/$(arg ROBOT_WORLD).world" respawn="false" output="screen"/>
        
        <!-- Spawn dynamic objects (cokecans, plants, doors etc..) -->
       	<!--<include file="$(find amigo_maps)/objects/objects_$(optenv ROS_DISTRO).launch"/>-->

        <!-- start controller manager (rviz) -->
        <include file="$(find pr2_controller_manager)/controller_manager.launch"/>

        <!-- Simulation controllers -->
        <include file="$(find amigo_simulation_controllers)/controllers_$(arg ROBOT_COMPLEXITY).launch"/>

        <!-- push robot_description to factory and spawn robot in gazebo -->
        <node name="spawn_amigo" pkg="gazebo" type="spawn_model" args="-gazebo_namespace gazebo -unpause -urdf -param robot_description -model amigo $(arg ROBOT_POSE)" respawn="false" output="screen" />

        <!-- Launch Gazebo GUI -->
        <group if="$(arg gui)">
            <node name="gazebo_gui" pkg="gazebo" type="gui" respawn="false" output="screen"/>
        </group>
        
    </group>


    <!-- Self filter (robots self removed from Kinect pointcloud on topic /camera/depth/points_self_filtered) -->
    <!--<include file="$(find amigo_self_filter)/start_filter.launch"/>-->

    <!-- Start ps3 teleop -->
    <!--<include file="$(find amigo_launch_files)/launch/interaction/teleop_ps3_joystick.launch" />-->

 </launch>
  
