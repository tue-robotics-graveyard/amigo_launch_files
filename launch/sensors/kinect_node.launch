<launch>
    <include file="$(find amigo_machine_files)/machines/amigo1.machine" />
    <include file="$(find amigo_machine_files)/machines/amigo2.machine" />
    <include file="$(find amigo_machine_files)/machines/amigo3.machine" />


  <arg name="node_name" default="kinect_driver" />
  <arg name="camera_ns" default="camera" />
  <arg name="device_id" default="0" />

  <node pkg="kinect_camera" type="kinect_node" name="$(arg node_name)" output="screen" machine="amigo3">
    <remap from="camera" to="$(arg camera_ns)" />
    <param name="device_id" value="$(arg device_id)" />
    <param name="camera_name" value="kinect" />
    <param name="rgb/camera_info_url"   value="file://$(find kinect_camera)/info/calibration_rgb.yaml" />
    <param name="depth/camera_info_url" value="file://$(find kinect_camera)/info/calibration_depth.yaml" />
    <rosparam command="load" file="$(find kinect_camera)/info/kinect_params.yaml" />
  </node>


<!-- Static frames -->

  <node pkg="tf" type="static_transform_publisher" name="kinect_base_link" args="0 -0.02 0 0 0 0  /openni_camera /openni_depth_frame 100"  machine="amigo3" />  
  <node pkg="tf" type="static_transform_publisher" name="kinect_base_link1" args="0 -0.04 0 0 0 0  /openni_camera /openni_rgb_frame 100"  machine="amigo3" />  
  <node pkg="tf" type="static_transform_publisher" name="kinect_base_link2" args="0 0 0 -1.57 0 -1.57 /openni_depth_frame /openni_depth_optical_frame  100"  machine="amigo3" />  
  <node pkg="tf" type="static_transform_publisher" name="kinect_base_link3" args="0 0 0 -1.57 0 -1.57 /openni_rgb_frame /openni_rgb_optical_frame 100" machine="amigo3"/>  



  <!-- voxelizer -->
  <!-- include file="$(find amigo_point_voxelizer)/launch/amigo_point_voxelizer.launch" /-->
  
    <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" machine="amigo3"/>

    <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
    <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen" machine="amigo3">
      <remap from="~input" to="/camera/rgb/points" />
      <remap from="~output" to="/camera/rgb/points_voxelized" />
      <rosparam>
        filter_field_name: z
        filter_limit_min: 0.01
        filter_limit_max: 4.5
        filter_limit_negative: False
        leaf_size: 0.01
      </rosparam>
    </node>



  <!-- point cloud converter so that navigation maps accept incoming clouds from kinect -->
  <node pkg="point_cloud_converter" type="point_cloud_converter" name="kinect_cloud_converter" machine="amigo3" >
    <remap from="points2_in" to="/camera/rgb/points_voxelized"/>
    <remap from="points_out" to="/camera/rbg/points_voxelized_pc1_format"/>
  </node>


</launch>

