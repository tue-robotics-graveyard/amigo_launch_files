<launch>
<!-- KINECT -->

  <include file="$(find amigo_machine_files)/machines/amigo1.machine" />
  <include file="$(find amigo_machine_files)/machines/amigo2.machine" />
  <include file="$(find amigo_machine_files)/machines/amigo3.machine" />


  <node pkg="openni_camera" type="openni_node" name="openni_node1" output="screen" machine="amigo3">
    <!--param name="topic" value="first" /-->
    <!--param name="device_id" value="2@3" --> <!-- this line uses device on usb bus 2 and addres 3 -->
    <!--param name="device_id" value="B00367707227042B"/--> <!-- this line uses device with given serial number -->
    
    <param name="device_id" value="#1"/> <!-- this line uses first enumerated device -->
    <rosparam command="load" file="$(find openni_camera)/info/openni_params.yaml" />
    <param name="rgb_frame_id" value="/openni_rgb_optical_frame" />
    <param name="depth_frame_id" value="/openni_depth_optical_frame" />
    <param name="use_indices" value="false" />
    <param name="depth_registration" value="true" />
    <param name="image_mode" value="2" />
    <param name="depth_mode" value="2" />
    <param name="debayering" value="2" />
    <param name="depth_time_offset" value="0" />
    <param name="image_time_offset" value="0" />
  </node>

<!-- Static frames -->

  <node pkg="tf" type="static_transform_publisher" name="kinect_base_link" args="0 -0.02 0 0 0 0  /openni_camera /openni_depth_frame 100"  machine="amigo3" />  
  <node pkg="tf" type="static_transform_publisher" name="kinect_base_link1" args="0 -0.04 0 0 0 0  /openni_camera /openni_rgb_frame 100"  machine="amigo3" />  
  <node pkg="tf" type="static_transform_publisher" name="kinect_base_link2" args="0 0 0 -1.57 0 -1.57 /openni_depth_frame /openni_depth_optical_frame  100"  machine="amigo3" />  
  <node pkg="tf" type="static_transform_publisher" name="kinect_base_link3" args="0 0 0 -1.57 0 -1.57 /openni_rgb_frame /openni_rgb_optical_frame 100" machine="amigo3"/>  



  <!-- voxelizer -->
  <include file="$(find amigo_point_voxelizer)/launch/amigo_point_voxelizer.launch" />

  <!-- point cloud converter so that navigation maps accept incoming clouds from kinect -->
  <node pkg="point_cloud_converter" type="point_cloud_converter" name="kinect_cloud_converter" machine="amigo3" >
    <remap from="points2_in" to="/camera/rgb/points_voxelized"/>
    <remap from="points_out" to="/camera/rbg/points_voxelized_pc1_format"/>
  </node>
</launch>

