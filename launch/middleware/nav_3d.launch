<?xml version="1.0"?>
    
<launch>

    <arg name="machine" value="$(optenv MACHINE_BASE_NAVIGATION_3D localhost)"/>
    <include file="$(find amigo_machine_files)/machines/$(arg machine).machine" />
    <arg name="ROBOT_REAL" default="$(optenv ROBOT_REAL false)" />
    <arg name="env" default="$(optenv ROBOT_ENV robotics_testlab_A)" />
    <arg name="loc" default="$(optenv AMIGO_LOC amcl)"/>
    <arg name="load_octomap" default="true" />
    <arg name="use_self_filter" default="true" />
           
    <!-- octomap should not be loaded if we are using gmapping -->
    <include file="$(find amigo_launch_files)/launch/middleware/nav_3d_$(arg loc).launch"/>
        
    <!-- Start the node that converts the laser data to a pointcloud -->
    <!-- <node pkg="tue_laser_to_pointcloud" type="laser_to_pointcloud" name="laser_to_pointcloud" machine="$(arg machine)"/> -->
    <node pkg="scan_to_cloud_converter" type="scan_to_cloud_converter_node" name="scan_to_cloud_converter_node" machine="$(arg machine)">
        <remap from="/scan" to="amigo/base_front_laser" /> 
        <remap from="/cloud" to="/fused_pointclouds" />
    </node> 
    
    <!-- Start the node that constructs a pointcloud from a depth image -->
    <node pkg="depth_map_to_point_cloud" type="depth_map_to_point_cloud_node" name="depth_map_to_point_cloud_node" machine="$(arg machine)">
        <remap from="/camera_info" to="/amigo/top_kinect/rgb/camera_info" />
        <remap if="$(arg use_self_filter)" from="/depth_image" to="/amigo/top_kinect/depth_registered/image_self_filtered" />
		<remap unless="$(arg use_self_filter)" from="/depth_image" to="/amigo/top_kinect/depth_registered/hw_registered/image_rect_raw" />
        <remap from="/point_cloud" to="/fused_pointclouds" />
        <param name="/max_range" value="4" />
        <param name="/sub_sample_factor" value="0.2" />
    </node> 

    <group if="$(arg use_self_filter)">
        <!-- Node that filters the arms out of the depth image -->
        <node pkg="depth_map_self_filter" type="self_filter" name="depth_map_self_filter" machine="$(arg machine)">
            <remap from="/camera_info" to="/amigo/top_kinect/rgb/camera_info" />
			<remap from="/depth_image" to="/amigo/top_kinect/depth_registered/hw_registered/image_rect_raw" />
        </node>
    </group>
            
    <!-- REAL ROBOT: use throttled and voxelized topics -->
    <group if="$(arg ROBOT_REAL)">
    <!-- Base Kinect (only for real robot; in simulation Kinect is loaded by Gazebo) -->
        <!--<include file="$(find amigo_launch_files)/launch/sensors/base_kinect.launch"/>-->
    <!-- Relay laser, base- and head kinect pointclouds to fused_pointclouds topic -->
         <!-- <node args="/base_scan_pointcloud /fused_pointclouds" name="base_scan_to_fused_pointclouds" pkg="topic_tools" type="relay" /> -->
         <!-- <node args="/base_camera/depth/points_throttled_and_voxelized /fused_pointclouds" name="base_camera_to_fused_pointclouds" pkg="topic_tools" type="relay" /> -->
         <!-- <node args="/camera/depth/points_throttled_and_voxelized /fused_pointclouds" name="camera_to_fused_pointclouds" pkg="topic_tools" type="relay" />-->
    </group>
    
    <!-- SIMULATION: use original topics, note that the camera namespace is absent for base_camera! (must be fixed in urdf model) -->
    <group unless="$(arg ROBOT_REAL)">
    <!-- Relay laser, base- and head kinect pointclouds to fused_pointclouds topic -->
         <!-- <node args="/base_scan_pointcloud /fused_pointclouds" name="base_scan_to_fused_pointclouds" pkg="topic_tools" type="relay" /> -->
         <!--<node args="/base_camera/rgb/points /fused_pointclouds" name="base_camera_to_fused_pointclouds" pkg="topic_tools" type="relay" /> -->
         <!--<node args="/camera/rgb/points /fused_pointclouds" name="camera_to_fused_pointclouds" pkg="topic_tools" type="relay" /> -->
    </group>

    <!-- Inverse reachability -->
    <include file="$(find amigo_launch_files)/launch/middleware/inverse_reachability.launch" >
		<arg name="use_2d" value="false"/>
    </include>
   
</launch>

